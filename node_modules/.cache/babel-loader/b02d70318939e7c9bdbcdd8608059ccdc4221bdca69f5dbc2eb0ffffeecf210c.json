{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\my-portfolio\\\\src\\\\components\\\\VideoEmbed.jsx\";\nimport React from 'react';\n\n// Component responsible for embedding YouTube or Google Drive videos responsively.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoEmbed = ({\n  videoUrl,\n  videoType,\n  title\n}) => {\n  // CRITICAL FIX: Add guard clause to prevent crash if videoUrl is undefined or null.\n  if (!videoUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-700 h-64 flex items-center justify-center rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-400\",\n        children: \"Video content unavailable or URL missing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  }\n  let embedSrc;\n\n  // 1. Determine the correct embed source based on the type\n  if (videoType === 'youtube' && videoUrl.includes('youtube.com/watch')) {\n    var _videoUrl$split$;\n    // Convert watch URL to embed URL\n    const videoId = (_videoUrl$split$ = videoUrl.split('v=')[1]) === null || _videoUrl$split$ === void 0 ? void 0 : _videoUrl$split$.split('&')[0];\n    embedSrc = videoId ? `https://www.youtube.com/embed/${videoId}?rel=0` : '';\n  } else if (videoType === 'drive' && (videoUrl.includes('drive.google.com/file') || videoUrl.includes('drive.google.com/embed'))) {\n    // Assume user provided the correct 'Embed item...' URL (which contains /embed/ or /preview)\n    embedSrc = videoUrl;\n  } else {\n    // Fallback for cases where the type is set but the URL is wrong\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: Invalid URL format for type \\\"\", videoType, \"\\\".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n  if (!embedSrc) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Error: Could not parse video ID from URL.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n  // 2. Render the responsive iframe\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full relative rounded-xl overflow-hidden shadow-2xl transition duration-300 transform hover:scale-[1.01]\"\n    // Tailwind's aspect-video utility ensures a perfect 16:9 ratio on all devices\n    ,\n    style: {\n      paddingTop: '56.25%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: title || 'Portfolio Video',\n      className: \"absolute top-0 left-0 w-full h-full border-0\",\n      src: embedSrc,\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_c = VideoEmbed;\nexport default VideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"VideoEmbed\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VideoEmbed","videoUrl","videoType","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","embedSrc","includes","_videoUrl$split$","videoId","split","style","paddingTop","src","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["D:/Projects/my-portfolio/src/components/VideoEmbed.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Component responsible for embedding YouTube or Google Drive videos responsively.\r\nconst VideoEmbed = ({ videoUrl, videoType, title }) => {\r\n    // CRITICAL FIX: Add guard clause to prevent crash if videoUrl is undefined or null.\r\n    if (!videoUrl) {\r\n        return (\r\n            <div className=\"bg-gray-700 h-64 flex items-center justify-center rounded-lg\">\r\n                <p className=\"text-gray-400\">Video content unavailable or URL missing.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let embedSrc;\r\n\r\n    // 1. Determine the correct embed source based on the type\r\n    if (videoType === 'youtube' && videoUrl.includes('youtube.com/watch')) {\r\n        // Convert watch URL to embed URL\r\n        const videoId = videoUrl.split('v=')[1]?.split('&')[0];\r\n        embedSrc = videoId ? `https://www.youtube.com/embed/${videoId}?rel=0` : '';\r\n    } else if (videoType === 'drive' && (videoUrl.includes('drive.google.com/file') || videoUrl.includes('drive.google.com/embed'))) {\r\n        // Assume user provided the correct 'Embed item...' URL (which contains /embed/ or /preview)\r\n        embedSrc = videoUrl;\r\n    } else {\r\n        // Fallback for cases where the type is set but the URL is wrong\r\n        return (\r\n            <div className=\"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\">\r\n                <p>Error: Invalid URL format for type \"{videoType}\".</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!embedSrc) {\r\n         return (\r\n            <div className=\"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\">\r\n                <p>Error: Could not parse video ID from URL.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // 2. Render the responsive iframe\r\n    return (\r\n        <div \r\n            className=\"w-full relative rounded-xl overflow-hidden shadow-2xl transition duration-300 transform hover:scale-[1.01]\"\r\n            // Tailwind's aspect-video utility ensures a perfect 16:9 ratio on all devices\r\n            style={{ paddingTop: '56.25%' }} \r\n        >\r\n            <iframe\r\n                title={title || 'Portfolio Video'}\r\n                className=\"absolute top-0 left-0 w-full h-full border-0\"\r\n                src={embedSrc}\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                allowFullScreen\r\n            ></iframe>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoEmbed;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAM,CAAC,KAAK;EACnD;EACA,IAAI,CAACF,QAAQ,EAAE;IACX,oBACIF,OAAA;MAAKK,SAAS,EAAC,8DAA8D;MAAAC,QAAA,eACzEN,OAAA;QAAGK,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAEd;EAEA,IAAIC,QAAQ;;EAEZ;EACA,IAAIR,SAAS,KAAK,SAAS,IAAID,QAAQ,CAACU,QAAQ,CAAC,mBAAmB,CAAC,EAAE;IAAA,IAAAC,gBAAA;IACnE;IACA,MAAMC,OAAO,IAAAD,gBAAA,GAAGX,QAAQ,CAACa,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAAF,gBAAA,uBAAvBA,gBAAA,CAAyBE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtDJ,QAAQ,GAAGG,OAAO,GAAG,iCAAiCA,OAAO,QAAQ,GAAG,EAAE;EAC9E,CAAC,MAAM,IAAIX,SAAS,KAAK,OAAO,KAAKD,QAAQ,CAACU,QAAQ,CAAC,uBAAuB,CAAC,IAAIV,QAAQ,CAACU,QAAQ,CAAC,wBAAwB,CAAC,CAAC,EAAE;IAC7H;IACAD,QAAQ,GAAGT,QAAQ;EACvB,CAAC,MAAM;IACH;IACA,oBACIF,OAAA;MAAKK,SAAS,EAAC,sDAAsD;MAAAC,QAAA,eACjEN,OAAA;QAAAM,QAAA,GAAG,uCAAoC,EAACH,SAAS,EAAC,KAAE;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvD,CAAC;EAEd;EAEA,IAAI,CAACC,QAAQ,EAAE;IACV,oBACGX,OAAA;MAAKK,SAAS,EAAC,sDAAsD;MAAAC,QAAA,eACjEN,OAAA;QAAAM,QAAA,EAAG;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAEd;;EAEA;EACA,oBACIV,OAAA;IACIK,SAAS,EAAC;IACV;IAAA;IACAW,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAX,QAAA,eAEhCN,OAAA;MACII,KAAK,EAAEA,KAAK,IAAI,iBAAkB;MAClCC,SAAS,EAAC,8CAA8C;MACxDa,GAAG,EAAEP,QAAS;MACdQ,KAAK,EAAC,qGAAqG;MAC3GC,eAAe;IAAA;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd,CAAC;AAACW,EAAA,GArDIpB,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}