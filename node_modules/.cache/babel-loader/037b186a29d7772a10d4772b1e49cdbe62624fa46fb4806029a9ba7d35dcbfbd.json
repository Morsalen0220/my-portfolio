{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, doc, setDoc, deleteDoc, collection, query, serverTimestamp, onSnapshot } from 'firebase/firestore';\n\n// --------------------------------------------------------------------------------\n// WARNING: When running locally (outside of the Canvas environment), we need to \n// provide the Firebase Configuration manually.\n// \n// ACTUAL CREDENTIALS HAVE BEEN ADDED BELOW FOR LOCAL DEVELOPMENT.\n// --------------------------------------------------------------------------------\nconst LOCAL_DEV_FIREBASE_CONFIG = {\n  apiKey: \"AIzaSyBS2NC2rkH6stMH4DEUdT105yUNKqTTRss\",\n  // <-- UPDATED\n  authDomain: \"first-project-a3e5c.firebaseapp.com\",\n  // <-- UPDATED\n  projectId: \"first-project-a3e5c\",\n  // <-- UPDATED\n  storageBucket: \"first-project-a3e5c.firebasestorage.app\",\n  // <-- UPDATED\n  messagingSenderId: \"40010184893\",\n  // <-- UPDATED\n  appId: \"1:40010184893:web:ab151405bcb065b8badfd4\",\n  // <-- UPDATED\n  measurementId: \"G-2PWV3BQ0C0\" // Added for completeness\n};\n\n// Check if running in the Canvas environment (where global variables are provided)\nconst isCanvasEnv = typeof __firebase_config !== 'undefined';\n\n// Use the local config for development, or the injected config for Canvas deployment\nconst firebaseConfig = isCanvasEnv ? JSON.parse(__firebase_config) : LOCAL_DEV_FIREBASE_CONFIG;\n\n// Use the injected app ID for Canvas, or a local-dev placeholder\nconst appId = isCanvasEnv ? typeof __app_id !== 'undefined' ? __app_id : 'default-canvas-app-id' : 'local-dev-app-id';\n\n// Use the injected auth token for Canvas, or an empty string for local dev\nconst initialAuthToken = isCanvasEnv ? typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '' : '';\n\n// A simple check to confirm if the user is the authenticated admin (only true in Canvas)\nexport const IS_ADMIN_USER = !!initialAuthToken;\n\n// Initialize Firebase\nlet app;\nlet auth;\nlet db;\ntry {\n  app = initializeApp(firebaseConfig);\n  auth = getAuth(app);\n  db = getFirestore(app);\n} catch (error) {\n  console.error(\"Firebase configuration is missing or invalid. Check LOCAL_DEV_FIREBASE_CONFIG in utils.js.\", error);\n}\n\n// --------------------------------------------------------------------------------\n// Firebase Authentication & User Setup\n// --------------------------------------------------------------------------------\n\n/**\r\n * Signs in the user, preferring the admin token if available, otherwise anonymously.\r\n */\nexport const signInUser = async () => {\n  try {\n    if (initialAuthToken) {\n      await signInWithCustomToken(auth, initialAuthToken);\n    } else {\n      // For local development, sign in anonymously to satisfy Firestore rules\n      await signInAnonymously(auth);\n    }\n  } catch (error) {\n    console.error(\"Error signing in to Firebase:\", error);\n  }\n};\nexport { auth, onAuthStateChanged, onSnapshot };\n\n// --------------------------------------------------------------------------------\n// Firestore Paths and CRUD Operations\n// --------------------------------------------------------------------------------\n\n// Define the core collection path for public data\nconst getCollectionPath = () => {\n  return `artifacts/${appId}/public/data/portfolio_items`;\n};\nexport const collectionRef = collection(db, getCollectionPath());\nexport { db, collection, query, doc, serverTimestamp };\n\n/**\r\n * Returns the query object for the real-time listener (all portfolio items).\r\n */\nexport const getPortfolioQuery = () => {\n  // Note: We avoid orderBy() here as it often requires indexes not setup in dev.\n  // Sorting will be done in memory within the component.\n  return query(collectionRef);\n};\n\n/**\r\n * Saves or updates a portfolio item.\r\n * @param {object} itemData - The data object for the portfolio item.\r\n */\nexport const savePortfolioItem = async itemData => {\n  if (!auth.currentUser) throw new Error(\"User not authenticated to save data.\");\n\n  // Create a new object with only the fields we want to save\n  const dataToSave = {\n    title: itemData.title,\n    description: itemData.description,\n    videoUrl: itemData.videoUrl,\n    isHero: itemData.isHero || false,\n    // ensure it's a boolean\n    timestamp: serverTimestamp()\n  };\n  if (itemData.id) {\n    // Update existing document\n    const itemDocRef = doc(db, getCollectionPath(), itemData.id);\n    await setDoc(itemDocRef, dataToSave, {\n      merge: true\n    });\n  } else {\n    // Create new document. setDoc is used to ensure we get a clean ID.\n    // We let Firestore generate the ID by using doc() without arguments, then setting the data.\n    const newDocRef = doc(collectionRef);\n    await setDoc(newDocRef, dataToSave);\n  }\n};\n\n/**\r\n * Deletes a portfolio item.\r\n * @param {string} itemId - The ID of the document to delete.\r\n */\nexport const deletePortfolioItem = async itemId => {\n  if (!auth.currentUser) throw new Error(\"User not authenticated to delete data.\");\n  const itemDocRef = doc(db, getCollectionPath(), itemId);\n  await deleteDoc(itemDocRef);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","getFirestore","doc","setDoc","deleteDoc","collection","query","serverTimestamp","onSnapshot","LOCAL_DEV_FIREBASE_CONFIG","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","isCanvasEnv","__firebase_config","firebaseConfig","JSON","parse","__app_id","initialAuthToken","__initial_auth_token","IS_ADMIN_USER","app","auth","db","error","console","signInUser","getCollectionPath","collectionRef","getPortfolioQuery","savePortfolioItem","itemData","currentUser","Error","dataToSave","title","description","videoUrl","isHero","timestamp","id","itemDocRef","merge","newDocRef","deletePortfolioItem","itemId"],"sources":["D:/Projects/my-portfolio/src/firebase/utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, doc, setDoc, deleteDoc, collection, query, serverTimestamp, onSnapshot } from 'firebase/firestore';\r\n\r\n// --------------------------------------------------------------------------------\r\n// WARNING: When running locally (outside of the Canvas environment), we need to \r\n// provide the Firebase Configuration manually.\r\n// \r\n// ACTUAL CREDENTIALS HAVE BEEN ADDED BELOW FOR LOCAL DEVELOPMENT.\r\n// --------------------------------------------------------------------------------\r\nconst LOCAL_DEV_FIREBASE_CONFIG = {\r\n    apiKey: \"AIzaSyBS2NC2rkH6stMH4DEUdT105yUNKqTTRss\", // <-- UPDATED\r\n    authDomain: \"first-project-a3e5c.firebaseapp.com\", // <-- UPDATED\r\n    projectId: \"first-project-a3e5c\", // <-- UPDATED\r\n    storageBucket: \"first-project-a3e5c.firebasestorage.app\", // <-- UPDATED\r\n    messagingSenderId: \"40010184893\", // <-- UPDATED\r\n    appId: \"1:40010184893:web:ab151405bcb065b8badfd4\", // <-- UPDATED\r\n    measurementId: \"G-2PWV3BQ0C0\" // Added for completeness\r\n};\r\n\r\n// Check if running in the Canvas environment (where global variables are provided)\r\nconst isCanvasEnv = typeof __firebase_config !== 'undefined';\r\n\r\n// Use the local config for development, or the injected config for Canvas deployment\r\nconst firebaseConfig = isCanvasEnv\r\n    ? JSON.parse(__firebase_config)\r\n    : LOCAL_DEV_FIREBASE_CONFIG;\r\n\r\n// Use the injected app ID for Canvas, or a local-dev placeholder\r\nconst appId = isCanvasEnv\r\n    ? (typeof __app_id !== 'undefined' ? __app_id : 'default-canvas-app-id')\r\n    : 'local-dev-app-id';\r\n\r\n// Use the injected auth token for Canvas, or an empty string for local dev\r\nconst initialAuthToken = isCanvasEnv\r\n    ? (typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '')\r\n    : '';\r\n\r\n// A simple check to confirm if the user is the authenticated admin (only true in Canvas)\r\nexport const IS_ADMIN_USER = !!initialAuthToken;\r\n\r\n// Initialize Firebase\r\nlet app;\r\nlet auth;\r\nlet db;\r\n\r\ntry {\r\n    app = initializeApp(firebaseConfig);\r\n    auth = getAuth(app);\r\n    db = getFirestore(app);\r\n} catch (error) {\r\n    console.error(\"Firebase configuration is missing or invalid. Check LOCAL_DEV_FIREBASE_CONFIG in utils.js.\", error);\r\n}\r\n\r\n// --------------------------------------------------------------------------------\r\n// Firebase Authentication & User Setup\r\n// --------------------------------------------------------------------------------\r\n\r\n/**\r\n * Signs in the user, preferring the admin token if available, otherwise anonymously.\r\n */\r\nexport const signInUser = async () => {\r\n    try {\r\n        if (initialAuthToken) {\r\n            await signInWithCustomToken(auth, initialAuthToken);\r\n        } else {\r\n            // For local development, sign in anonymously to satisfy Firestore rules\r\n            await signInAnonymously(auth);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error signing in to Firebase:\", error);\r\n    }\r\n};\r\n\r\nexport { auth, onAuthStateChanged, onSnapshot };\r\n\r\n// --------------------------------------------------------------------------------\r\n// Firestore Paths and CRUD Operations\r\n// --------------------------------------------------------------------------------\r\n\r\n// Define the core collection path for public data\r\nconst getCollectionPath = () => {\r\n    return `artifacts/${appId}/public/data/portfolio_items`;\r\n};\r\n\r\nexport const collectionRef = collection(db, getCollectionPath());\r\nexport { db, collection, query, doc, serverTimestamp };\r\n\r\n\r\n/**\r\n * Returns the query object for the real-time listener (all portfolio items).\r\n */\r\nexport const getPortfolioQuery = () => {\r\n    // Note: We avoid orderBy() here as it often requires indexes not setup in dev.\r\n    // Sorting will be done in memory within the component.\r\n    return query(collectionRef);\r\n};\r\n\r\n\r\n/**\r\n * Saves or updates a portfolio item.\r\n * @param {object} itemData - The data object for the portfolio item.\r\n */\r\nexport const savePortfolioItem = async (itemData) => {\r\n    if (!auth.currentUser) throw new Error(\"User not authenticated to save data.\");\r\n    \r\n    // Create a new object with only the fields we want to save\r\n    const dataToSave = {\r\n        title: itemData.title,\r\n        description: itemData.description,\r\n        videoUrl: itemData.videoUrl,\r\n        isHero: itemData.isHero || false, // ensure it's a boolean\r\n        timestamp: serverTimestamp(),\r\n    };\r\n\r\n    if (itemData.id) {\r\n        // Update existing document\r\n        const itemDocRef = doc(db, getCollectionPath(), itemData.id);\r\n        await setDoc(itemDocRef, dataToSave, { merge: true });\r\n    } else {\r\n        // Create new document. setDoc is used to ensure we get a clean ID.\r\n        // We let Firestore generate the ID by using doc() without arguments, then setting the data.\r\n        const newDocRef = doc(collectionRef);\r\n        await setDoc(newDocRef, dataToSave);\r\n    }\r\n};\r\n\r\n/**\r\n * Deletes a portfolio item.\r\n * @param {string} itemId - The ID of the document to delete.\r\n */\r\nexport const deletePortfolioItem = async (itemId) => {\r\n    if (!auth.currentUser) throw new Error(\"User not authenticated to delete data.\");\r\n    const itemDocRef = doc(db, getCollectionPath(), itemId);\r\n    await deleteDoc(itemDocRef);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}