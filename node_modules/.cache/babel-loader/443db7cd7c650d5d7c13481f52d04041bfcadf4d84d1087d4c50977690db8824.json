{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\my-portfolio\\\\src\\\\components\\\\VideoEmbed.jsx\";\nimport React from 'react';\n\n// Component responsible for embedding YouTube or Google Drive videos responsively.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoEmbed = ({\n  videoUrl,\n  videoType,\n  title\n}) => {\n  // CRITICAL FIX: Add guard clause to prevent crash if videoUrl is undefined or null (Fixes \"includes\" error)\n  if (!videoUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-700 h-64 flex items-center justify-center rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-400\",\n        children: \"Video content unavailable or URL missing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this);\n  }\n  let embedSrc = '';\n\n  // 1. Determine the correct embed source based on the type\n  if (videoType === 'youtube') {\n    let videoId = '';\n\n    // Handle standard watch URL: https://www.youtube.com/watch?v=VIDEO_ID\n    if (videoUrl.includes('youtube.com/watch?v=')) {\n      var _videoUrl$split$;\n      videoId = (_videoUrl$split$ = videoUrl.split('v=')[1]) === null || _videoUrl$split$ === void 0 ? void 0 : _videoUrl$split$.split('&')[0];\n    }\n    // Handle short URL: https://youtu.be/VIDEO_ID\n    else if (videoUrl.includes('youtu.be/')) {\n      var _videoUrl$split$2;\n      videoId = (_videoUrl$split$2 = videoUrl.split('youtu.be/')[1]) === null || _videoUrl$split$2 === void 0 ? void 0 : _videoUrl$split$2.split('?')[0];\n    }\n    if (videoId) {\n      // Use the consistent embed URL format\n      embedSrc = `https://www.youtube.com/embed/${videoId}?rel=0`;\n    }\n  } else if (videoType === 'drive') {\n    // Assume user provided the correct 'Embed item...' URL (which contains /embed/ or /preview)\n    // If the URL is just a share link, it will likely fail, but we pass the full URL provided.\n    embedSrc = videoUrl;\n  }\n  if (!embedSrc) {\n    // Display a visible error if parsing failed or type/url combination is invalid\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: Could not parse video URL for type \\\"\", videoType, \"\\\". Check your link format in the Admin Panel.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  }\n\n  // 2. Render the responsive iframe\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full relative rounded-xl overflow-hidden shadow-2xl transition duration-300 transform hover:scale-[1.01]\"\n    // Tailwind's style={{ paddingTop: '56.25%' }} ensures a perfect 16:9 ratio on all devices\n    ,\n    style: {\n      paddingTop: '56.25%'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: title || 'Portfolio Video',\n      className: \"absolute top-0 left-0 w-full h-full border-0\",\n      src: embedSrc,\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_c = VideoEmbed;\nexport default VideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"VideoEmbed\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VideoEmbed","videoUrl","videoType","title","className","children","fileName","_jsxFileName","lineNumber","columnNumber","embedSrc","videoId","includes","_videoUrl$split$","split","_videoUrl$split$2","style","paddingTop","src","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["D:/Projects/my-portfolio/src/components/VideoEmbed.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n// Component responsible for embedding YouTube or Google Drive videos responsively.\r\nconst VideoEmbed = ({ videoUrl, videoType, title }) => {\r\n    // CRITICAL FIX: Add guard clause to prevent crash if videoUrl is undefined or null (Fixes \"includes\" error)\r\n    if (!videoUrl) {\r\n        return (\r\n            <div className=\"bg-gray-700 h-64 flex items-center justify-center rounded-lg\">\r\n                <p className=\"text-gray-400\">Video content unavailable or URL missing.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let embedSrc = '';\r\n\r\n    // 1. Determine the correct embed source based on the type\r\n    if (videoType === 'youtube') {\r\n        let videoId = '';\r\n        \r\n        // Handle standard watch URL: https://www.youtube.com/watch?v=VIDEO_ID\r\n        if (videoUrl.includes('youtube.com/watch?v=')) {\r\n            videoId = videoUrl.split('v=')[1]?.split('&')[0];\r\n        } \r\n        // Handle short URL: https://youtu.be/VIDEO_ID\r\n        else if (videoUrl.includes('youtu.be/')) {\r\n            videoId = videoUrl.split('youtu.be/')[1]?.split('?')[0];\r\n        }\r\n\r\n        if (videoId) {\r\n            // Use the consistent embed URL format\r\n            embedSrc = `https://www.youtube.com/embed/${videoId}?rel=0`;\r\n        }\r\n    } else if (videoType === 'drive') {\r\n        // Assume user provided the correct 'Embed item...' URL (which contains /embed/ or /preview)\r\n        // If the URL is just a share link, it will likely fail, but we pass the full URL provided.\r\n        embedSrc = videoUrl;\r\n    } \r\n\r\n    if (!embedSrc) {\r\n         // Display a visible error if parsing failed or type/url combination is invalid\r\n         return (\r\n            <div className=\"bg-red-900 bg-opacity-30 p-4 rounded-lg text-red-400\">\r\n                <p>Error: Could not parse video URL for type \"{videoType}\". Check your link format in the Admin Panel.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // 2. Render the responsive iframe\r\n    return (\r\n        <div \r\n            className=\"w-full relative rounded-xl overflow-hidden shadow-2xl transition duration-300 transform hover:scale-[1.01]\"\r\n            // Tailwind's style={{ paddingTop: '56.25%' }} ensures a perfect 16:9 ratio on all devices\r\n            style={{ paddingTop: '56.25%' }} \r\n        >\r\n            <iframe\r\n                title={title || 'Portfolio Video'}\r\n                className=\"absolute top-0 left-0 w-full h-full border-0\"\r\n                src={embedSrc}\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                allowFullScreen\r\n            ></iframe>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoEmbed;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAM,CAAC,KAAK;EACnD;EACA,IAAI,CAACF,QAAQ,EAAE;IACX,oBACIF,OAAA;MAAKK,SAAS,EAAC,8DAA8D;MAAAC,QAAA,eACzEN,OAAA;QAAGK,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAEd;EAEA,IAAIC,QAAQ,GAAG,EAAE;;EAEjB;EACA,IAAIR,SAAS,KAAK,SAAS,EAAE;IACzB,IAAIS,OAAO,GAAG,EAAE;;IAEhB;IACA,IAAIV,QAAQ,CAACW,QAAQ,CAAC,sBAAsB,CAAC,EAAE;MAAA,IAAAC,gBAAA;MAC3CF,OAAO,IAAAE,gBAAA,GAAGZ,QAAQ,CAACa,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,cAAAD,gBAAA,uBAAvBA,gBAAA,CAAyBC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD;IACA;IAAA,KACK,IAAIb,QAAQ,CAACW,QAAQ,CAAC,WAAW,CAAC,EAAE;MAAA,IAAAG,iBAAA;MACrCJ,OAAO,IAAAI,iBAAA,GAAGd,QAAQ,CAACa,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,cAAAC,iBAAA,uBAA9BA,iBAAA,CAAgCD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D;IAEA,IAAIH,OAAO,EAAE;MACT;MACAD,QAAQ,GAAG,iCAAiCC,OAAO,QAAQ;IAC/D;EACJ,CAAC,MAAM,IAAIT,SAAS,KAAK,OAAO,EAAE;IAC9B;IACA;IACAQ,QAAQ,GAAGT,QAAQ;EACvB;EAEA,IAAI,CAACS,QAAQ,EAAE;IACV;IACA,oBACGX,OAAA;MAAKK,SAAS,EAAC,sDAAsD;MAAAC,QAAA,eACjEN,OAAA;QAAAM,QAAA,GAAG,8CAA2C,EAACH,SAAS,EAAC,gDAA6C;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzG,CAAC;EAEd;;EAEA;EACA,oBACIV,OAAA;IACIK,SAAS,EAAC;IACV;IAAA;IACAY,KAAK,EAAE;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAZ,QAAA,eAEhCN,OAAA;MACII,KAAK,EAAEA,KAAK,IAAI,iBAAkB;MAClCC,SAAS,EAAC,8CAA8C;MACxDc,GAAG,EAAER,QAAS;MACdS,KAAK,EAAC,qGAAqG;MAC3GC,eAAe;IAAA;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd,CAAC;AAACY,EAAA,GA5DIrB,UAAU;AA8DhB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}