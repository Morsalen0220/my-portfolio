{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\my-portfolio\\\\src\\\\components\\\\VideoEmbed.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoEmbed = ({\n  item\n}) => {\n  // --- Start Debugging ---\n  console.log(\"--- VideoEmbed Component ---\");\n  console.log(\"Received item:\", item);\n  // --- End Debugging ---\n\n  const {\n    videoUrl,\n    type,\n    title\n  } = item || {};\n  if (!videoUrl || !videoUrl.includes('https://')) {\n    console.error(\"Error: videoUrl is missing or invalid.\", videoUrl);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full bg-black flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-400 text-xs p-2\",\n        children: \"Video URL error.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this);\n  }\n  let embedUrl = '';\n  if (type === 'youtube') {\n    let videoId = '';\n    try {\n      if (videoUrl.includes('youtu.be/')) {\n        videoId = videoUrl.split('youtu.be/')[1].split('?')[0];\n      } else if (videoUrl.includes('watch?v=')) {\n        videoId = videoUrl.split('watch?v=')[1].split('&')[0];\n      }\n      if (videoId) {\n        embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=0&rel=0`;\n      }\n    } catch (e) {\n      console.error(\"Failed to parse YouTube URL:\", e);\n    }\n    console.log(\"YouTube Video ID:\", videoId);\n  } else if (type === 'drive') {\n    // Ensure it's a valid Google Drive embed/preview URL\n    if (videoUrl.includes('/preview') || videoUrl.includes('/embed')) {\n      embedUrl = videoUrl;\n    }\n    console.log(\"Google Drive URL detected.\");\n  }\n  console.log(\"Final Embed URL:\", embedUrl);\n  console.log(\"--------------------------\");\n  if (!embedUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full bg-black flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-400 text-xs p-2\",\n        children: \"Could not generate embed link. Check URL format.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"iframe\", {\n    className: \"w-full h-full\",\n    src: embedUrl,\n    title: title || 'Embedded Video',\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_c = VideoEmbed;\nexport default VideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"VideoEmbed\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VideoEmbed","item","console","log","videoUrl","type","title","includes","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","embedUrl","videoId","split","e","src","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["D:/Projects/my-portfolio/src/components/VideoEmbed.jsx"],"sourcesContent":["import React from 'react';\r\n\r\nconst VideoEmbed = ({ item }) => {\r\n    // --- Start Debugging ---\r\n    console.log(\"--- VideoEmbed Component ---\");\r\n    console.log(\"Received item:\", item);\r\n    // --- End Debugging ---\r\n\r\n    const { videoUrl, type, title } = item || {};\r\n\r\n    if (!videoUrl || !videoUrl.includes('https://')) {\r\n        console.error(\"Error: videoUrl is missing or invalid.\", videoUrl);\r\n        return (\r\n            <div className=\"w-full h-full bg-black flex items-center justify-center\">\r\n                <p className=\"text-red-400 text-xs p-2\">Video URL error.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    let embedUrl = '';\r\n\r\n    if (type === 'youtube') {\r\n        let videoId = '';\r\n        try {\r\n            if (videoUrl.includes('youtu.be/')) {\r\n                videoId = videoUrl.split('youtu.be/')[1].split('?')[0];\r\n            } else if (videoUrl.includes('watch?v=')) {\r\n                videoId = videoUrl.split('watch?v=')[1].split('&')[0];\r\n            }\r\n            if (videoId) {\r\n                embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=0&rel=0`;\r\n            }\r\n        } catch (e) {\r\n            console.error(\"Failed to parse YouTube URL:\", e);\r\n        }\r\n        console.log(\"YouTube Video ID:\", videoId);\r\n\r\n    } else if (type === 'drive') {\r\n        // Ensure it's a valid Google Drive embed/preview URL\r\n        if (videoUrl.includes('/preview') || videoUrl.includes('/embed')) {\r\n            embedUrl = videoUrl;\r\n        }\r\n        console.log(\"Google Drive URL detected.\");\r\n    }\r\n\r\n    console.log(\"Final Embed URL:\", embedUrl);\r\n    console.log(\"--------------------------\");\r\n\r\n\r\n    if (!embedUrl) {\r\n        return (\r\n            <div className=\"w-full h-full bg-black flex items-center justify-center\">\r\n                <p className=\"text-red-400 text-xs p-2\">Could not generate embed link. Check URL format.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <iframe\r\n            className=\"w-full h-full\"\r\n            src={embedUrl}\r\n            title={title || 'Embedded Video'}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n        ></iframe>\r\n    );\r\n};\r\n\r\nexport default VideoEmbed;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}