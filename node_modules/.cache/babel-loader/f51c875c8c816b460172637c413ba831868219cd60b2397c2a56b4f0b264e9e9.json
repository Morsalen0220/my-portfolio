{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, addDoc, serverTimestamp } from \"firebase/firestore\";\n\n// --- START Local Development Configuration ---\n// IMPORTANT: Replace these with your actual Firebase project credentials for local development.\nconst LOCAL_DEV_FIREBASE_CONFIG = {\n  apiKey: \"AIzaSyBS2NC2rkH6stMH4DEUdT105yUNKqTTRss\",\n  authDomain: \"first-project-a3e5c.firebaseapp.com\",\n  projectId: \"first-project-a3e5c\",\n  storageBucket: \"first-project-a3e5c.appspot.com\",\n  messagingSenderId: \"40010184893\",\n  appId: \"1:40010184893:web:ab151405bcb065b8badfd4\",\n  measurementId: \"G-2PWV3BQ0C0\"\n};\n// --- END Local Development Configuration ---\n\n// These variables are provided by the hosting environment.\n// For local dev, we use the config object above.\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : LOCAL_DEV_FIREBASE_CONFIG;\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst auth = getAuth(app);\n\n// Check if the user is the special admin user (only in production environment)\nconst IS_ADMIN_USER = typeof __is_admin_user !== 'undefined' ? __is_admin_user : false;\n\n// --- Authentication Functions ---\n\n// CORRECTED: Only sign in anonymously if no user is currently logged in.\nexport const signInUser = async () => {\n  try {\n    if (!auth.currentUser) {\n      // Check if a user session already exists\n      const authToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n      if (authToken) {\n        console.log(\"Signing in with custom token...\");\n        await signInWithCustomToken(auth, authToken);\n      } else {\n        console.log(\"No active user session. Signing in anonymously...\");\n        await signInAnonymously(auth);\n      }\n    } else {\n      console.log(\"User session already exists. Skipping anonymous sign-in.\");\n    }\n  } catch (error) {\n    console.error(\"Error signing in to Firebase:\", error);\n  }\n};\nexport const signInWithEmail = async (email, password) => {\n  return signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n    // After signing out, sign in anonymously again for public access\n    await signInAnonymously(auth);\n    console.log(\"User signed out and is now anonymous.\");\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n  }\n};\n\n// --- Firestore Functions ---\n\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'local-dev-app-id';\nconst collectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'portfolio_items');\nexport const getPortfolioQuery = () => {\n  return query(collectionRef);\n};\nexport const savePortfolioItem = async itemData => {\n  try {\n    const docRef = itemData.id ? doc(collectionRef, itemData.id) : doc(collectionRef); // Let Firestore generate ID for new items\n\n    const dataToSave = {\n      ...itemData,\n      updatedAt: serverTimestamp()\n    };\n    if (!itemData.id) {\n      dataToSave.createdAt = serverTimestamp();\n    }\n    await setDoc(docRef, dataToSave, {\n      merge: true\n    });\n    console.log(\"Portfolio item saved successfully!\");\n  } catch (error) {\n    console.error(\"Error saving portfolio item:\", error);\n    throw error;\n  }\n};\nexport const deletePortfolioItem = async itemId => {\n  try {\n    const docRef = doc(collectionRef, itemId);\n    await deleteDoc(docRef);\n    console.log(\"Portfolio item deleted successfully!\");\n  } catch (error) {\n    console.error(\"Error deleting portfolio item:\", error);\n    throw error;\n  }\n};\n\n// Export necessary Firebase services and functions for use in components\nexport { auth, db, onAuthStateChanged, onSnapshot, collection, query, doc, IS_ADMIN_USER, serverTimestamp, collectionRef };","map":{"version":3,"names":["initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","signInWithEmailAndPassword","signOut","getFirestore","doc","getDoc","setDoc","updateDoc","deleteDoc","onSnapshot","collection","query","addDoc","serverTimestamp","LOCAL_DEV_FIREBASE_CONFIG","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseConfig","__firebase_config","JSON","parse","app","db","auth","IS_ADMIN_USER","__is_admin_user","signInUser","currentUser","authToken","__initial_auth_token","console","log","error","signInWithEmail","email","password","signOutUser","__app_id","collectionRef","getPortfolioQuery","savePortfolioItem","itemData","docRef","id","dataToSave","updatedAt","createdAt","merge","deletePortfolioItem","itemId"],"sources":["D:/Projects/my-portfolio/src/firebase/utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { \r\n    getAuth, \r\n    signInAnonymously, \r\n    signInWithCustomToken, \r\n    onAuthStateChanged,\r\n    signInWithEmailAndPassword,\r\n    signOut\r\n} from \"firebase/auth\";\r\nimport { \r\n    getFirestore, \r\n    doc, \r\n    getDoc, \r\n    setDoc, \r\n    updateDoc, \r\n    deleteDoc, \r\n    onSnapshot, \r\n    collection, \r\n    query,\r\n    addDoc,\r\n    serverTimestamp\r\n} from \"firebase/firestore\";\r\n\r\n// --- START Local Development Configuration ---\r\n// IMPORTANT: Replace these with your actual Firebase project credentials for local development.\r\nconst LOCAL_DEV_FIREBASE_CONFIG = {\r\n  apiKey: \"AIzaSyBS2NC2rkH6stMH4DEUdT105yUNKqTTRss\",\r\n  authDomain: \"first-project-a3e5c.firebaseapp.com\",\r\n  projectId: \"first-project-a3e5c\",\r\n  storageBucket: \"first-project-a3e5c.appspot.com\",\r\n  messagingSenderId: \"40010184893\",\r\n  appId: \"1:40010184893:web:ab151405bcb065b8badfd4\",\r\n  measurementId: \"G-2PWV3BQ0C0\"\r\n};\r\n// --- END Local Development Configuration ---\r\n\r\n\r\n// These variables are provided by the hosting environment.\r\n// For local dev, we use the config object above.\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' \r\n    ? JSON.parse(__firebase_config) \r\n    : LOCAL_DEV_FIREBASE_CONFIG;\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\n\r\n// Check if the user is the special admin user (only in production environment)\r\nconst IS_ADMIN_USER = typeof __is_admin_user !== 'undefined' ? __is_admin_user : false;\r\n\r\n// --- Authentication Functions ---\r\n\r\n// CORRECTED: Only sign in anonymously if no user is currently logged in.\r\nexport const signInUser = async () => {\r\n    try {\r\n        if (!auth.currentUser) { // Check if a user session already exists\r\n            const authToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n            if (authToken) {\r\n                console.log(\"Signing in with custom token...\");\r\n                await signInWithCustomToken(auth, authToken);\r\n            } else {\r\n                console.log(\"No active user session. Signing in anonymously...\");\r\n                await signInAnonymously(auth);\r\n            }\r\n        } else {\r\n            console.log(\"User session already exists. Skipping anonymous sign-in.\");\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error signing in to Firebase:\", error);\r\n    }\r\n};\r\n\r\nexport const signInWithEmail = async (email, password) => {\r\n    return signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => {\r\n    try {\r\n        await signOut(auth);\r\n        // After signing out, sign in anonymously again for public access\r\n        await signInAnonymously(auth); \r\n        console.log(\"User signed out and is now anonymous.\");\r\n    } catch (error) {\r\n        console.error(\"Error signing out:\", error);\r\n    }\r\n};\r\n\r\n// --- Firestore Functions ---\r\n\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : 'local-dev-app-id';\r\nconst collectionRef = collection(db, 'artifacts', appId, 'public', 'data', 'portfolio_items');\r\n\r\nexport const getPortfolioQuery = () => {\r\n    return query(collectionRef);\r\n};\r\n\r\nexport const savePortfolioItem = async (itemData) => {\r\n    try {\r\n        const docRef = itemData.id \r\n            ? doc(collectionRef, itemData.id)\r\n            : doc(collectionRef); // Let Firestore generate ID for new items\r\n        \r\n        const dataToSave = {\r\n            ...itemData,\r\n            updatedAt: serverTimestamp(),\r\n        };\r\n\r\n        if (!itemData.id) {\r\n            dataToSave.createdAt = serverTimestamp();\r\n        }\r\n\r\n        await setDoc(docRef, dataToSave, { merge: true });\r\n        console.log(\"Portfolio item saved successfully!\");\r\n    } catch (error) {\r\n        console.error(\"Error saving portfolio item:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const deletePortfolioItem = async (itemId) => {\r\n    try {\r\n        const docRef = doc(collectionRef, itemId);\r\n        await deleteDoc(docRef);\r\n        console.log(\"Portfolio item deleted successfully!\");\r\n    } catch (error) {\r\n        console.error(\"Error deleting portfolio item:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n\r\n// Export necessary Firebase services and functions for use in components\r\nexport { \r\n    auth, \r\n    db, \r\n    onAuthStateChanged, \r\n    onSnapshot,\r\n    collection,\r\n    query,\r\n    doc,\r\n    IS_ADMIN_USER,\r\n    serverTimestamp,\r\n    collectionRef\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}