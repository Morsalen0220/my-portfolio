{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\my-portfolio\\\\src\\\\components\\\\VideoEmbed.jsx\";\nimport React from 'react';\n\n/**\r\n * Parses the video URL and embeds the content using a responsive iframe.\r\n * Handles both YouTube and Google Drive links.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoEmbed = ({\n  item\n}) => {\n  // Safety check: if item or videoUrl is missing, return the unavailable message\n  if (!item || !item.videoUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aspect-video w-full bg-red-900/50 flex items-center justify-center rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-xl\",\n        children: \"Video content unavailable or URL missing.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this);\n  }\n  const {\n    videoUrl,\n    type\n  } = item;\n  let embedUrl = '';\n  if (type === 'youtube') {\n    // Robust way to extract YouTube video ID from various URL formats (watch?v=, youtu.be/)\n    let videoId = '';\n    const standardMatch = videoUrl.match(/(?:\\?v=|&v=|youtu\\.be\\/)([^&?]+)/);\n    if (standardMatch) {\n      videoId = standardMatch[1];\n    }\n    if (videoId) {\n      // Use the YouTube embed format for the extracted video ID\n      embedUrl = `https://www.youtube-nocookie.com/embed/${videoId}?rel=0&showinfo=0&autoplay=0`;\n    }\n  } else if (type === 'drive') {\n    // Assume Google Drive link is already the correct '/preview' or 'embed' link\n    embedUrl = videoUrl;\n  }\n  if (!embedUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aspect-video w-full bg-red-900/50 flex items-center justify-center rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-xl\",\n        children: \"Error: Could not parse video URL for embedding.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Standard responsive video container (aspect-video = 16:9 ratio)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"aspect-video w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      className: \"w-full h-full rounded-lg\",\n      src: embedUrl,\n      title: item.title || \"Embedded Video\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = VideoEmbed;\nexport default VideoEmbed;\nvar _c;\n$RefreshReg$(_c, \"VideoEmbed\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VideoEmbed","item","videoUrl","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","embedUrl","videoId","standardMatch","match","src","title","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["D:/Projects/my-portfolio/src/components/VideoEmbed.jsx"],"sourcesContent":["import React from 'react';\r\n\r\n/**\r\n * Parses the video URL and embeds the content using a responsive iframe.\r\n * Handles both YouTube and Google Drive links.\r\n */\r\nconst VideoEmbed = ({ item }) => {\r\n    // Safety check: if item or videoUrl is missing, return the unavailable message\r\n    if (!item || !item.videoUrl) {\r\n        return (\r\n            <div className=\"aspect-video w-full bg-red-900/50 flex items-center justify-center rounded-lg\">\r\n                <p className=\"text-white text-xl\">Video content unavailable or URL missing.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const { videoUrl, type } = item;\r\n    let embedUrl = '';\r\n\r\n    if (type === 'youtube') {\r\n        // Robust way to extract YouTube video ID from various URL formats (watch?v=, youtu.be/)\r\n        let videoId = '';\r\n        const standardMatch = videoUrl.match(/(?:\\?v=|&v=|youtu\\.be\\/)([^&?]+)/);\r\n        \r\n        if (standardMatch) {\r\n            videoId = standardMatch[1];\r\n        }\r\n\r\n        if (videoId) {\r\n            // Use the YouTube embed format for the extracted video ID\r\n            embedUrl = `https://www.youtube-nocookie.com/embed/${videoId}?rel=0&showinfo=0&autoplay=0`;\r\n        }\r\n    } else if (type === 'drive') {\r\n        // Assume Google Drive link is already the correct '/preview' or 'embed' link\r\n        embedUrl = videoUrl;\r\n    }\r\n\r\n    if (!embedUrl) {\r\n        return (\r\n            <div className=\"aspect-video w-full bg-red-900/50 flex items-center justify-center rounded-lg\">\r\n                <p className=\"text-white text-xl\">Error: Could not parse video URL for embedding.</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Standard responsive video container (aspect-video = 16:9 ratio)\r\n    return (\r\n        <div className=\"aspect-video w-full\">\r\n            <iframe\r\n                className=\"w-full h-full rounded-lg\"\r\n                src={embedUrl}\r\n                title={item.title || \"Embedded Video\"}\r\n                frameBorder=\"0\"\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n                allowFullScreen\r\n            ></iframe>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VideoEmbed;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC7B;EACA,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACC,QAAQ,EAAE;IACzB,oBACIH,OAAA;MAAKI,SAAS,EAAC,+EAA+E;MAAAC,QAAA,eAC1FL,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAyC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CAAC;EAEd;EAEA,MAAM;IAAEN,QAAQ;IAAEO;EAAK,CAAC,GAAGR,IAAI;EAC/B,IAAIS,QAAQ,GAAG,EAAE;EAEjB,IAAID,IAAI,KAAK,SAAS,EAAE;IACpB;IACA,IAAIE,OAAO,GAAG,EAAE;IAChB,MAAMC,aAAa,GAAGV,QAAQ,CAACW,KAAK,CAAC,kCAAkC,CAAC;IAExE,IAAID,aAAa,EAAE;MACfD,OAAO,GAAGC,aAAa,CAAC,CAAC,CAAC;IAC9B;IAEA,IAAID,OAAO,EAAE;MACT;MACAD,QAAQ,GAAG,0CAA0CC,OAAO,8BAA8B;IAC9F;EACJ,CAAC,MAAM,IAAIF,IAAI,KAAK,OAAO,EAAE;IACzB;IACAC,QAAQ,GAAGR,QAAQ;EACvB;EAEA,IAAI,CAACQ,QAAQ,EAAE;IACX,oBACIX,OAAA;MAAKI,SAAS,EAAC,+EAA+E;MAAAC,QAAA,eAC1FL,OAAA;QAAGI,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAA+C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpF,CAAC;EAEd;;EAEA;EACA,oBACIT,OAAA;IAAKI,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAChCL,OAAA;MACII,SAAS,EAAC,0BAA0B;MACpCW,GAAG,EAAEJ,QAAS;MACdK,KAAK,EAAEd,IAAI,CAACc,KAAK,IAAI,gBAAiB;MACtCC,WAAW,EAAC,GAAG;MACfC,KAAK,EAAC,0FAA0F;MAChGC,eAAe;IAAA;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEd,CAAC;AAACW,EAAA,GApDInB,UAAU;AAsDhB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}