{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore, collection, query, onSnapshot, setDoc, doc, updateDoc, deleteDoc, addDoc, serverTimestamp, runTransaction } from 'firebase/firestore';\nimport { setLogLevel } from 'firebase/app';\n\n// Set Firebase log level for debugging (optional, can be removed after setup)\nsetLogLevel('debug');\n\n/*\r\n * =========================================================================\r\n * STEP 1: CONFIGURATION FOR LOCAL DEVELOPMENT\r\n * * If running the app locally, you MUST replace the placeholder config below\r\n * with the credentials for your own Firebase project.\r\n * * Get your config from: Firebase Console -> Project Settings -> General.\r\n * =========================================================================\r\n*/\n\nconst LOCAL_DEV_FIREBASE_CONFIG = {\n  apiKey: \"YOUR_API_KEY\",\n  // <-- REQUIRED: Replace this\n  authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\",\n  // <-- REQUIRED: Replace this\n  projectId: \"YOUR_PROJECT_ID\",\n  // <-- REQUIRED: Replace this\n  storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\n  messagingSenderId: \"1234567890\",\n  appId: \"1:1234567890:web:abcdefg\"\n};\nconst LOCAL_APP_ID = 'local-dev-app-id';\n\n// Check if we are running in the secure Canvas environment or locally.\nconst appId = typeof __app_id !== 'undefined' ? __app_id : LOCAL_APP_ID;\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : LOCAL_DEV_FIREBASE_CONFIG;\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\n\n// Check for missing config and warn the user (only in local dev)\nif (!firebaseConfig.apiKey || firebaseConfig.apiKey === \"YOUR_API_KEY\") {\n  console.error(\"CRITICAL ERROR: Firebase configuration is missing or using placeholder values. Please update LOCAL_DEV_FIREBASE_CONFIG in src/firebase/utils.js to save your data.\");\n  console.warn(\"App will run in a READ-ONLY mode until configuration is updated.\");\n}\n\n// Global variable to determine if the user is the authenticated administrator (used by App.jsx)\nexport const IS_ADMIN_USER = initialAuthToken !== null;\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nexport const db = getFirestore(app);\nexport const auth = getAuth(app);\n\n// --- FIREBASE PATHS ---\n// Public data is shared among all users of this app.\nconst PUBLIC_COLLECTION_PATH = `/artifacts/${appId}/public/data`;\nconst PORTFOLIO_COLLECTION_NAME = 'portfolio_items';\n\n// --- UTILITY FUNCTIONS ---\n\n// Function to handle the initial sign-in\nexport const signInUser = async () => {\n  try {\n    if (initialAuthToken) {\n      // Sign in as admin user using the provided custom token (Canvas environment)\n      await signInWithCustomToken(auth, initialAuthToken);\n    } else {\n      // Sign in anonymously (default for public access/local development)\n      await signInAnonymously(auth);\n    }\n  } catch (error) {\n    console.error(\"Firebase sign-in error (retrying):\", error);\n    // Implement a simple retry mechanism\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    try {\n      if (initialAuthToken) {\n        await signInWithCustomToken(auth, initialAuthToken);\n      } else {\n        await signInAnonymously(auth);\n      }\n    } catch (retryError) {\n      console.error(\"Firebase sign-in failed after retry. Check network/config.\", retryError);\n    }\n  }\n};\n\n// Function to get the query for portfolio items\nexport const getPortfolioQuery = () => {\n  // Create a reference to the 'portfolio_items' collection inside the public data path.\n  const collectionRef = collection(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME);\n  // Note: We avoid orderBy() to prevent needing additional Firestore indexes. We will sort in-memory.\n  return query(collectionRef);\n};\n\n// --- CRUD Operations (Used by AdminPanel/ItemForm) ---\n\n// Create/Update a portfolio item\nexport const savePortfolioItem = async item => {\n  const itemData = {\n    ...item,\n    timestamp: serverTimestamp()\n  };\n  try {\n    // If item has an ID, it's an update; otherwise, it's a new item (addDoc)\n    if (item.id) {\n      const docRef = doc(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME, item.id);\n      await updateDoc(docRef, itemData);\n      console.log(\"Document successfully updated with ID:\", item.id);\n    } else {\n      const collectionRef = collection(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME);\n      await addDoc(collectionRef, itemData);\n      console.log(\"Document successfully written (new item).\");\n    }\n  } catch (e) {\n    console.error(\"Error adding/updating document: \", e);\n    throw e;\n  }\n};\n\n// Delete a portfolio item\nexport const deletePortfolioItem = async id => {\n  try {\n    const docRef = doc(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME, id);\n    await deleteDoc(docRef);\n    console.log(\"Document successfully deleted with ID:\", id);\n  } catch (e) {\n    console.error(\"Error deleting document: \", e);\n    throw e;\n  }\n};\n\n// Export necessary Firebase features for use in React components\nexport { onAuthStateChanged, collection, query, onSnapshot, doc, serverTimestamp };","map":{"version":3,"names":["initializeApp","getAuth","signInAnonymously","signInWithCustomToken","onAuthStateChanged","getFirestore","collection","query","onSnapshot","setDoc","doc","updateDoc","deleteDoc","addDoc","serverTimestamp","runTransaction","setLogLevel","LOCAL_DEV_FIREBASE_CONFIG","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","LOCAL_APP_ID","__app_id","firebaseConfig","__firebase_config","JSON","parse","initialAuthToken","__initial_auth_token","console","error","warn","IS_ADMIN_USER","app","db","auth","PUBLIC_COLLECTION_PATH","PORTFOLIO_COLLECTION_NAME","signInUser","Promise","resolve","setTimeout","retryError","getPortfolioQuery","collectionRef","savePortfolioItem","item","itemData","timestamp","id","docRef","log","e","deletePortfolioItem"],"sources":["D:/Projects/my-portfolio/src/firebase/utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\r\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\r\nimport { getFirestore, collection, query, onSnapshot, setDoc, doc, updateDoc, deleteDoc, addDoc, serverTimestamp, runTransaction } from 'firebase/firestore';\r\nimport { setLogLevel } from 'firebase/app';\r\n\r\n// Set Firebase log level for debugging (optional, can be removed after setup)\r\nsetLogLevel('debug');\r\n\r\n/*\r\n * =========================================================================\r\n * STEP 1: CONFIGURATION FOR LOCAL DEVELOPMENT\r\n * * If running the app locally, you MUST replace the placeholder config below\r\n * with the credentials for your own Firebase project.\r\n * * Get your config from: Firebase Console -> Project Settings -> General.\r\n * =========================================================================\r\n*/\r\n\r\nconst LOCAL_DEV_FIREBASE_CONFIG = {\r\n    apiKey: \"YOUR_API_KEY\", // <-- REQUIRED: Replace this\r\n    authDomain: \"YOUR_PROJECT_ID.firebaseapp.com\", // <-- REQUIRED: Replace this\r\n    projectId: \"YOUR_PROJECT_ID\", // <-- REQUIRED: Replace this\r\n    storageBucket: \"YOUR_PROJECT_ID.appspot.com\",\r\n    messagingSenderId: \"1234567890\",\r\n    appId: \"1:1234567890:web:abcdefg\"\r\n};\r\n\r\nconst LOCAL_APP_ID = 'local-dev-app-id';\r\n\r\n// Check if we are running in the secure Canvas environment or locally.\r\nconst appId = typeof __app_id !== 'undefined' ? __app_id : LOCAL_APP_ID;\r\nconst firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : LOCAL_DEV_FIREBASE_CONFIG;\r\nconst initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;\r\n\r\n// Check for missing config and warn the user (only in local dev)\r\nif (!firebaseConfig.apiKey || firebaseConfig.apiKey === \"YOUR_API_KEY\") {\r\n    console.error(\"CRITICAL ERROR: Firebase configuration is missing or using placeholder values. Please update LOCAL_DEV_FIREBASE_CONFIG in src/firebase/utils.js to save your data.\");\r\n    console.warn(\"App will run in a READ-ONLY mode until configuration is updated.\");\r\n}\r\n\r\n// Global variable to determine if the user is the authenticated administrator (used by App.jsx)\r\nexport const IS_ADMIN_USER = initialAuthToken !== null;\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport const db = getFirestore(app);\r\nexport const auth = getAuth(app);\r\n\r\n// --- FIREBASE PATHS ---\r\n// Public data is shared among all users of this app.\r\nconst PUBLIC_COLLECTION_PATH = `/artifacts/${appId}/public/data`;\r\nconst PORTFOLIO_COLLECTION_NAME = 'portfolio_items';\r\n\r\n// --- UTILITY FUNCTIONS ---\r\n\r\n// Function to handle the initial sign-in\r\nexport const signInUser = async () => {\r\n    try {\r\n        if (initialAuthToken) {\r\n            // Sign in as admin user using the provided custom token (Canvas environment)\r\n            await signInWithCustomToken(auth, initialAuthToken);\r\n        } else {\r\n            // Sign in anonymously (default for public access/local development)\r\n            await signInAnonymously(auth);\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Firebase sign-in error (retrying):\", error);\r\n        // Implement a simple retry mechanism\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n        try {\r\n            if (initialAuthToken) {\r\n                await signInWithCustomToken(auth, initialAuthToken);\r\n            } else {\r\n                await signInAnonymously(auth);\r\n            }\r\n        } catch (retryError) {\r\n            console.error(\"Firebase sign-in failed after retry. Check network/config.\", retryError);\r\n        }\r\n    }\r\n};\r\n\r\n// Function to get the query for portfolio items\r\nexport const getPortfolioQuery = () => {\r\n    // Create a reference to the 'portfolio_items' collection inside the public data path.\r\n    const collectionRef = collection(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME);\r\n    // Note: We avoid orderBy() to prevent needing additional Firestore indexes. We will sort in-memory.\r\n    return query(collectionRef);\r\n};\r\n\r\n\r\n// --- CRUD Operations (Used by AdminPanel/ItemForm) ---\r\n\r\n// Create/Update a portfolio item\r\nexport const savePortfolioItem = async (item) => {\r\n    const itemData = { \r\n        ...item,\r\n        timestamp: serverTimestamp() \r\n    };\r\n\r\n    try {\r\n        // If item has an ID, it's an update; otherwise, it's a new item (addDoc)\r\n        if (item.id) {\r\n            const docRef = doc(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME, item.id);\r\n            await updateDoc(docRef, itemData);\r\n            console.log(\"Document successfully updated with ID:\", item.id);\r\n        } else {\r\n            const collectionRef = collection(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME);\r\n            await addDoc(collectionRef, itemData);\r\n            console.log(\"Document successfully written (new item).\");\r\n        }\r\n    } catch (e) {\r\n        console.error(\"Error adding/updating document: \", e);\r\n        throw e;\r\n    }\r\n};\r\n\r\n// Delete a portfolio item\r\nexport const deletePortfolioItem = async (id) => {\r\n    try {\r\n        const docRef = doc(db, PUBLIC_COLLECTION_PATH, PORTFOLIO_COLLECTION_NAME, id);\r\n        await deleteDoc(docRef);\r\n        console.log(\"Document successfully deleted with ID:\", id);\r\n    } catch (e) {\r\n        console.error(\"Error deleting document: \", e);\r\n        throw e;\r\n    }\r\n};\r\n\r\n// Export necessary Firebase features for use in React components\r\nexport { onAuthStateChanged, collection, query, onSnapshot, doc, serverTimestamp };\r\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,iBAAiB,EAAEC,qBAAqB,EAAEC,kBAAkB,QAAQ,eAAe;AACrG,SAASC,YAAY,EAAEC,UAAU,EAAEC,KAAK,EAAEC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,EAAEC,MAAM,EAAEC,eAAe,EAAEC,cAAc,QAAQ,oBAAoB;AAC5J,SAASC,WAAW,QAAQ,cAAc;;AAE1C;AACAA,WAAW,CAAC,OAAO,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,yBAAyB,GAAG;EAC9BC,MAAM,EAAE,cAAc;EAAE;EACxBC,UAAU,EAAE,iCAAiC;EAAE;EAC/CC,SAAS,EAAE,iBAAiB;EAAE;EAC9BC,aAAa,EAAE,6BAA6B;EAC5CC,iBAAiB,EAAE,YAAY;EAC/BC,KAAK,EAAE;AACX,CAAC;AAED,MAAMC,YAAY,GAAG,kBAAkB;;AAEvC;AACA,MAAMD,KAAK,GAAG,OAAOE,QAAQ,KAAK,WAAW,GAAGA,QAAQ,GAAGD,YAAY;AACvE,MAAME,cAAc,GAAG,OAAOC,iBAAiB,KAAK,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACF,iBAAiB,CAAC,GAAGV,yBAAyB;AAC3H,MAAMa,gBAAgB,GAAG,OAAOC,oBAAoB,KAAK,WAAW,GAAGA,oBAAoB,GAAG,IAAI;;AAElG;AACA,IAAI,CAACL,cAAc,CAACR,MAAM,IAAIQ,cAAc,CAACR,MAAM,KAAK,cAAc,EAAE;EACpEc,OAAO,CAACC,KAAK,CAAC,oKAAoK,CAAC;EACnLD,OAAO,CAACE,IAAI,CAAC,kEAAkE,CAAC;AACpF;;AAEA;AACA,OAAO,MAAMC,aAAa,GAAGL,gBAAgB,KAAK,IAAI;;AAEtD;AACA,MAAMM,GAAG,GAAGpC,aAAa,CAAC0B,cAAc,CAAC;AACzC,OAAO,MAAMW,EAAE,GAAGhC,YAAY,CAAC+B,GAAG,CAAC;AACnC,OAAO,MAAME,IAAI,GAAGrC,OAAO,CAACmC,GAAG,CAAC;;AAEhC;AACA;AACA,MAAMG,sBAAsB,GAAG,cAAchB,KAAK,cAAc;AAChE,MAAMiB,yBAAyB,GAAG,iBAAiB;;AAEnD;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,IAAIX,gBAAgB,EAAE;MAClB;MACA,MAAM3B,qBAAqB,CAACmC,IAAI,EAAER,gBAAgB,CAAC;IACvD,CAAC,MAAM;MACH;MACA,MAAM5B,iBAAiB,CAACoC,IAAI,CAAC;IACjC;EACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D;IACA,MAAM,IAAIS,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IACvD,IAAI;MACA,IAAIb,gBAAgB,EAAE;QAClB,MAAM3B,qBAAqB,CAACmC,IAAI,EAAER,gBAAgB,CAAC;MACvD,CAAC,MAAM;QACH,MAAM5B,iBAAiB,CAACoC,IAAI,CAAC;MACjC;IACJ,CAAC,CAAC,OAAOO,UAAU,EAAE;MACjBb,OAAO,CAACC,KAAK,CAAC,4DAA4D,EAAEY,UAAU,CAAC;IAC3F;EACJ;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACnC;EACA,MAAMC,aAAa,GAAGzC,UAAU,CAAC+B,EAAE,EAAEE,sBAAsB,EAAEC,yBAAyB,CAAC;EACvF;EACA,OAAOjC,KAAK,CAACwC,aAAa,CAAC;AAC/B,CAAC;;AAGD;;AAEA;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,IAAI,IAAK;EAC7C,MAAMC,QAAQ,GAAG;IACb,GAAGD,IAAI;IACPE,SAAS,EAAErC,eAAe,CAAC;EAC/B,CAAC;EAED,IAAI;IACA;IACA,IAAImC,IAAI,CAACG,EAAE,EAAE;MACT,MAAMC,MAAM,GAAG3C,GAAG,CAAC2B,EAAE,EAAEE,sBAAsB,EAAEC,yBAAyB,EAAES,IAAI,CAACG,EAAE,CAAC;MAClF,MAAMzC,SAAS,CAAC0C,MAAM,EAAEH,QAAQ,CAAC;MACjClB,OAAO,CAACsB,GAAG,CAAC,wCAAwC,EAAEL,IAAI,CAACG,EAAE,CAAC;IAClE,CAAC,MAAM;MACH,MAAML,aAAa,GAAGzC,UAAU,CAAC+B,EAAE,EAAEE,sBAAsB,EAAEC,yBAAyB,CAAC;MACvF,MAAM3B,MAAM,CAACkC,aAAa,EAAEG,QAAQ,CAAC;MACrClB,OAAO,CAACsB,GAAG,CAAC,2CAA2C,CAAC;IAC5D;EACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;IACRvB,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEsB,CAAC,CAAC;IACpD,MAAMA,CAAC;EACX;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOJ,EAAE,IAAK;EAC7C,IAAI;IACA,MAAMC,MAAM,GAAG3C,GAAG,CAAC2B,EAAE,EAAEE,sBAAsB,EAAEC,yBAAyB,EAAEY,EAAE,CAAC;IAC7E,MAAMxC,SAAS,CAACyC,MAAM,CAAC;IACvBrB,OAAO,CAACsB,GAAG,CAAC,wCAAwC,EAAEF,EAAE,CAAC;EAC7D,CAAC,CAAC,OAAOG,CAAC,EAAE;IACRvB,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEsB,CAAC,CAAC;IAC7C,MAAMA,CAAC;EACX;AACJ,CAAC;;AAED;AACA,SAASnD,kBAAkB,EAAEE,UAAU,EAAEC,KAAK,EAAEC,UAAU,EAAEE,GAAG,EAAEI,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}